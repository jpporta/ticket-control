// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: link.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createLink = `-- name: CreateLink :one
INSERT INTO link (url, title, created_by)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateLinkParams struct {
	Url       string
	Title     string
	CreatedBy int32
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (int32, error) {
	row := q.db.QueryRow(ctx, createLink, arg.Url, arg.Title, arg.CreatedBy)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteLastLink = `-- name: DeleteLastLink :exec
DELETE FROM link
WHERE id = (
	SELECT id FROM link as t
	WHERE t.created_by = $1
	ORDER BY created_at DESC
	LIMIT 1
)
`

func (q *Queries) DeleteLastLink(ctx context.Context, createdBy int32) error {
	_, err := q.db.Exec(ctx, deleteLastLink, createdBy)
	return err
}

const totalLinksFromUser = `-- name: TotalLinksFromUser :one
SELECT count(*) AS total FROM link
WHERE created_by = $1
AND created_at >= $2
AND created_at < $3
`

type TotalLinksFromUserParams struct {
	CreatedBy   int32
	CreatedAt   pgtype.Timestamp
	CreatedAt_2 pgtype.Timestamp
}

func (q *Queries) TotalLinksFromUser(ctx context.Context, arg TotalLinksFromUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, totalLinksFromUser, arg.CreatedBy, arg.CreatedAt, arg.CreatedAt_2)
	var total int64
	err := row.Scan(&total)
	return total, err
}
