// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: schedule.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createScheduleTask = `-- name: CreateScheduleTask :exec
INSERT INTO schedule (name, title, description, cron_expression, created_by, check_function)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateScheduleTaskParams struct {
	Name           string
	Title          string
	Description    pgtype.Text
	CronExpression string
	CreatedBy      int32
	CheckFunction  pgtype.Text
}

func (q *Queries) CreateScheduleTask(ctx context.Context, arg CreateScheduleTaskParams) error {
	_, err := q.db.Exec(ctx, createScheduleTask,
		arg.Name,
		arg.Title,
		arg.Description,
		arg.CronExpression,
		arg.CreatedBy,
		arg.CheckFunction,
	)
	return err
}

const getAllEnabledScheduleTasks = `-- name: GetAllEnabledScheduleTasks :many
SELECT id, name, title, description, cron_expression, enabled, created_by, check_function
FROM schedule
WHERE enabled = TRUE
ORDER BY created_at DESC
`

type GetAllEnabledScheduleTasksRow struct {
	ID             int32
	Name           string
	Title          string
	Description    pgtype.Text
	CronExpression string
	Enabled        bool
	CreatedBy      int32
	CheckFunction  pgtype.Text
}

func (q *Queries) GetAllEnabledScheduleTasks(ctx context.Context) ([]GetAllEnabledScheduleTasksRow, error) {
	rows, err := q.db.Query(ctx, getAllEnabledScheduleTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllEnabledScheduleTasksRow
	for rows.Next() {
		var i GetAllEnabledScheduleTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CronExpression,
			&i.Enabled,
			&i.CreatedBy,
			&i.CheckFunction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserScheduleTasks = `-- name: GetUserScheduleTasks :many
SELECT id, name, title, description, cron_expression, enabled, created_at, updated_at, check_function
FROM schedule
WHERE created_by = $1
ORDER BY created_at DESC
`

type GetUserScheduleTasksRow struct {
	ID             int32
	Name           string
	Title          string
	Description    pgtype.Text
	CronExpression string
	Enabled        bool
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	CheckFunction  pgtype.Text
}

func (q *Queries) GetUserScheduleTasks(ctx context.Context, createdBy int32) ([]GetUserScheduleTasksRow, error) {
	rows, err := q.db.Query(ctx, getUserScheduleTasks, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserScheduleTasksRow
	for rows.Next() {
		var i GetUserScheduleTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Title,
			&i.Description,
			&i.CronExpression,
			&i.Enabled,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CheckFunction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleScheduleTask = `-- name: ToggleScheduleTask :one
UPDATE schedule
SET enabled = NOT enabled, updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND created_by = $2
RETURNING id, name, title, description, cron_expression, enabled, created_at, updated_at, check_function
`

type ToggleScheduleTaskParams struct {
	ID        int32
	CreatedBy int32
}

type ToggleScheduleTaskRow struct {
	ID             int32
	Name           string
	Title          string
	Description    pgtype.Text
	CronExpression string
	Enabled        bool
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
	CheckFunction  pgtype.Text
}

func (q *Queries) ToggleScheduleTask(ctx context.Context, arg ToggleScheduleTaskParams) (ToggleScheduleTaskRow, error) {
	row := q.db.QueryRow(ctx, toggleScheduleTask, arg.ID, arg.CreatedBy)
	var i ToggleScheduleTaskRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Title,
		&i.Description,
		&i.CronExpression,
		&i.Enabled,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CheckFunction,
	)
	return i, err
}
