// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeTasks = `-- name: CompleteTasks :one
UPDATE task
SET completed_at = NOW()
WHERE id = ANY($1::int[])
AND created_by = $2
AND completed_at IS NULL
RETURNING count(*) AS total
`

type CompleteTasksParams struct {
	Column1   []int32
	CreatedBy int32
}

func (q *Queries) CompleteTasks(ctx context.Context, arg CompleteTasksParams) (int64, error) {
	row := q.db.QueryRow(ctx, completeTasks, arg.Column1, arg.CreatedBy)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const createTask = `-- name: CreateTask :one
INSERT INTO task (title, description, priority, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateTaskParams struct {
	Title       string
	Description pgtype.Text
	Priority    pgtype.Int4
	CreatedBy   int32
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (int32, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.CreatedBy,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteLastTask = `-- name: DeleteLastTask :exec
DELETE FROM task
WHERE id = (
	SELECT id FROM task as t
	WHERE t.created_by = $1
	ORDER BY created_at DESC
	LIMIT 1
)
`

func (q *Queries) DeleteLastTask(ctx context.Context, createdBy int32) error {
	_, err := q.db.Exec(ctx, deleteLastTask, createdBy)
	return err
}

const getNoUsersTask = `-- name: GetNoUsersTask :one
SELECT count(*) AS total FROM task
WHERE created_by = $1
AND created_at >= $2
AND created_at < $3
`

type GetNoUsersTaskParams struct {
	CreatedBy   int32
	CreatedAt   pgtype.Timestamp
	CreatedAt_2 pgtype.Timestamp
}

func (q *Queries) GetNoUsersTask(ctx context.Context, arg GetNoUsersTaskParams) (int64, error) {
	row := q.db.QueryRow(ctx, getNoUsersTask, arg.CreatedBy, arg.CreatedAt, arg.CreatedAt_2)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const getOpenTasks = `-- name: GetOpenTasks :many
SELECT id, title, priority, created_at
FROM task
WHERE completed_at IS NULL
AND created_by = $1
ORDER BY priority DESC, created_at ASC
`

type GetOpenTasksRow struct {
	ID        int32
	Title     string
	Priority  pgtype.Int4
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetOpenTasks(ctx context.Context, createdBy int32) ([]GetOpenTasksRow, error) {
	rows, err := q.db.Query(ctx, getOpenTasks, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOpenTasksRow
	for rows.Next() {
		var i GetOpenTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Priority,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
